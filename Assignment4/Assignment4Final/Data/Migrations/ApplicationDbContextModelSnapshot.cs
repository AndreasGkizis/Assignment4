// <auto-generated />
using System;
using Assignment4Final.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment4Final.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.11");

            modelBuilder.Entity("CertificateTopic", b =>
                {
                    b.Property<int>("CertificatesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopicsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CertificatesId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("CertificateTopic");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Use")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.Property<int>("ExamsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExamsId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CandidateAppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateAppUserId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CandidateNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Landline")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PhotoIdIssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoIdNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PhotoIdTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PhotoIdTypeId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryOfResidence")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GenderType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NativeLanguage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.PhotoIdType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PhotoIdTypes");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.DifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DifficultyLevels");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CandidateAppUserId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CandidateScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsModerated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MarkerAppUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MarkerAssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MarkingDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxScore")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PercentScore")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Voucher")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateAppUserId");

                    b.HasIndex("ExamId");

                    b.HasIndex("MarkerAppUserId");

                    b.ToTable("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExamAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CandidateExamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChosenOption")
                        .HasColumnType("TEXT");

                    b.Property<string>("CorrectOption")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsCorrectModerated")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("CandidateExamAnswers");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CertificateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMark")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassMark")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Marker", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("AppUserId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DifficultyLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TopicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CertificateTopic", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.Certificate", null)
                        .WithMany()
                        .HasForeignKey("CertificatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Certificates.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.HasOne("ModelLibrary.Models.Exams.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Questions.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Address", b =>
                {
                    b.HasOne("ModelLibrary.Models.Candidates.Candidate", "Candidate")
                        .WithMany("Address")
                        .HasForeignKey("CandidateAppUserId");

                    b.HasOne("ModelLibrary.Models.Candidates.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId");

                    b.Navigation("Candidate");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", "AppUser")
                        .WithOne("Candidate")
                        .HasForeignKey("ModelLibrary.Models.Candidates.Candidate", "AppUserId");

                    b.HasOne("ModelLibrary.Models.Candidates.Gender", "Gender")
                        .WithMany("Candidates")
                        .HasForeignKey("GenderId");

                    b.HasOne("ModelLibrary.Models.Candidates.Language", "Language")
                        .WithMany("Candidates")
                        .HasForeignKey("LanguageId");

                    b.HasOne("ModelLibrary.Models.Candidates.PhotoIdType", "PhotoIdType")
                        .WithMany("Candidates")
                        .HasForeignKey("PhotoIdTypeId");

                    b.Navigation("AppUser");

                    b.Navigation("Gender");

                    b.Navigation("Language");

                    b.Navigation("PhotoIdType");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.HasOne("ModelLibrary.Models.Candidates.Candidate", "Candidate")
                        .WithMany("CandidateExams")
                        .HasForeignKey("CandidateAppUserId");

                    b.HasOne("ModelLibrary.Models.Exams.Exam", "Exam")
                        .WithMany("CandidateExams")
                        .HasForeignKey("ExamId");

                    b.HasOne("ModelLibrary.Models.Exams.Marker", "Marker")
                        .WithMany("CandidateExams")
                        .HasForeignKey("MarkerAppUserId");

                    b.Navigation("Candidate");

                    b.Navigation("Exam");

                    b.Navigation("Marker");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExamAnswers", b =>
                {
                    b.HasOne("ModelLibrary.Models.Exams.CandidateExam", "CandidateExam")
                        .WithMany("CandidateExamAnswers")
                        .HasForeignKey("CandidateExamId");

                    b.HasOne("ModelLibrary.Models.Questions.Question", "Question")
                        .WithMany("CandidateExamAnswers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("CandidateExam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.Certificate", "Certificate")
                        .WithMany("Exams")
                        .HasForeignKey("CertificateId");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Marker", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", "AppUser")
                        .WithOne("Marker")
                        .HasForeignKey("ModelLibrary.Models.Exams.Marker", "AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Option", b =>
                {
                    b.HasOne("ModelLibrary.Models.Questions.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.DifficultyLevel", "DifficultyLevel")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyLevelId");

                    b.HasOne("ModelLibrary.Models.Certificates.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ModelLibrary.Models.AppUser", b =>
                {
                    b.Navigation("Candidate")
                        .IsRequired();

                    b.Navigation("Marker")
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Gender", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Language", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.PhotoIdType", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Certificate", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.DifficultyLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.Navigation("CandidateExamAnswers");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.Navigation("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Marker", b =>
                {
                    b.Navigation("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.Navigation("CandidateExamAnswers");

                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
