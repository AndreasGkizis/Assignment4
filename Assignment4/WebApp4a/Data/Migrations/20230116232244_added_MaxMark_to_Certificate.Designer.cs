// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp4a.Data;

#nullable disable

namespace WebApp4a.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230116232244_added_MaxMark_to_Certificate")]
    partial class added_MaxMark_to_Certificate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CertificateTopic", b =>
                {
                    b.Property<int>("CertificatesId")
                        .HasColumnType("int");

                    b.Property<int>("TopicsId")
                        .HasColumnType("int");

                    b.HasKey("CertificatesId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("CertificateTopic");
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.Property<int>("ExamsId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.HasKey("ExamsId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2d9f618-7700-482c-8891-2058f2a6ee69",
                            Email = "admin0@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b9cc35b-cfd9-41ea-9010-43117d21e21d",
                            TwoFactorEnabled = false,
                            UserName = "Admin0"
                        },
                        new
                        {
                            Id = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a88d600e-76c5-4aff-96d6-18603245d42d",
                            Email = "admin1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87972167-2451-4f97-9025-7e99e49414af",
                            TwoFactorEnabled = false,
                            UserName = "Admin1"
                        },
                        new
                        {
                            Id = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bf40999-f2d8-4d13-a878-df40866d03c9",
                            Email = "admin2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06a74940-3fb2-4dd0-b02d-8ef147e4566b",
                            TwoFactorEnabled = false,
                            UserName = "Admin2"
                        },
                        new
                        {
                            Id = "f60a904a-aba6-4635-892d-f38919b09896",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac7fdbb6-4ee6-475a-9bac-e644b62b8048",
                            Email = "admin3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd746ada-6e8d-4e0a-9701-08d41bf640d0",
                            TwoFactorEnabled = false,
                            UserName = "Admin3"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address1 = "831 Heller Place",
                            Address2 = "9688 Stark Place",
                            CandidateId = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            City = "New Demond",
                            CountryId = 1,
                            PostalCode = "95510-8057",
                            State = "Vermont"
                        },
                        new
                        {
                            Id = 2,
                            Address1 = "5075 Karl Curve",
                            Address2 = "19598 Madge Mission",
                            CandidateId = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            City = "Ritchieborough",
                            CountryId = 2,
                            PostalCode = "48284",
                            State = "Louisiana"
                        },
                        new
                        {
                            Id = 3,
                            Address1 = "6314 Jenifer Plains",
                            Address2 = "18120 Leannon Club",
                            CandidateId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            City = "East Jeff",
                            CountryId = 3,
                            PostalCode = "70911",
                            State = "Vermont"
                        },
                        new
                        {
                            Id = 4,
                            Address1 = "7589 Dejon Heights",
                            Address2 = "459 Skiles Crossroad",
                            CandidateId = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            City = "East Cristalview",
                            CountryId = 4,
                            PostalCode = "14236-9757",
                            State = "Louisiana"
                        },
                        new
                        {
                            Id = 5,
                            Address1 = "51359 Chet Trail",
                            Address2 = "34678 Jess Hill",
                            CandidateId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            City = "Valentinafurt",
                            CountryId = 5,
                            PostalCode = "17049-9241",
                            State = "Oregon"
                        },
                        new
                        {
                            Id = 6,
                            Address1 = "308 Ferry Ridges",
                            Address2 = "9991 Fay Walk",
                            CandidateId = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            City = "Port Nelson",
                            CountryId = 6,
                            PostalCode = "36477",
                            State = "Alaska"
                        },
                        new
                        {
                            Id = 7,
                            Address1 = "708 Zieme Village",
                            Address2 = "8821 Toby Land",
                            CandidateId = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            City = "Heathville",
                            CountryId = 7,
                            PostalCode = "47627",
                            State = "Tennessee"
                        },
                        new
                        {
                            Id = 8,
                            Address1 = "9589 Bryana Stream",
                            Address2 = "1449 Laney Underpass",
                            CandidateId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            City = "South Ursula",
                            CountryId = 8,
                            PostalCode = "10949-0483",
                            State = "Hawaii"
                        },
                        new
                        {
                            Id = 9,
                            Address1 = "44989 Hodkiewicz Brook",
                            Address2 = "37608 Harber Stream",
                            CandidateId = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            City = "Lake Nina",
                            CountryId = 9,
                            PostalCode = "30846",
                            State = "Virginia"
                        },
                        new
                        {
                            Id = 10,
                            Address1 = "5974 Chandler Parkway",
                            Address2 = "3757 Margie Brook",
                            CandidateId = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            City = "East Delaneybury",
                            CountryId = 10,
                            PostalCode = "08208-7354",
                            State = "Mississippi"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CandidateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PhotoIdIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoIdTypeId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PhotoIdTypeId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            AppUserId = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            CandidateNumber = "420088571",
                            DateOfBirth = new DateTime(1991, 11, 5, 18, 47, 22, 526, DateTimeKind.Local).AddTicks(3990),
                            Email = "Otho_Pfannerstill31@gmail.com",
                            FirstName = "Josianne",
                            GenderId = 2,
                            Landline = "645.786.1631 x0930",
                            LanguageId = 2,
                            LastName = "Pfeffer",
                            MiddleName = "Yolanda",
                            Mobile = "351-303-5993 x592",
                            PhotoIdIssueDate = new DateTime(2022, 2, 25, 20, 32, 45, 43, DateTimeKind.Local).AddTicks(9628),
                            PhotoIdNumber = "bfqee8",
                            PhotoIdTypeId = 4
                        },
                        new
                        {
                            AppUserId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            CandidateNumber = "136721276",
                            DateOfBirth = new DateTime(1988, 7, 20, 18, 2, 20, 401, DateTimeKind.Local).AddTicks(3484),
                            Email = "Dedrick_Lynch@hotmail.com",
                            FirstName = "Adeline",
                            GenderId = 4,
                            Landline = "615.524.9751 x3792",
                            LanguageId = 2,
                            LastName = "Dietrich",
                            MiddleName = "Aiyana",
                            Mobile = "(750) 481-1897",
                            PhotoIdIssueDate = new DateTime(2018, 1, 10, 6, 54, 26, 826, DateTimeKind.Local).AddTicks(148),
                            PhotoIdNumber = "cb4osy",
                            PhotoIdTypeId = 5
                        },
                        new
                        {
                            AppUserId = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            CandidateNumber = "153060623",
                            DateOfBirth = new DateTime(1956, 1, 6, 20, 24, 0, 128, DateTimeKind.Local).AddTicks(8794),
                            Email = "Kory27@gmail.com",
                            FirstName = "Dakota",
                            GenderId = 4,
                            Landline = "(210) 799-5764 x6282",
                            LanguageId = 1,
                            LastName = "Wilkinson",
                            MiddleName = "Bridie",
                            Mobile = "1-783-633-4424",
                            PhotoIdIssueDate = new DateTime(2022, 9, 15, 8, 10, 51, 411, DateTimeKind.Local).AddTicks(1507),
                            PhotoIdNumber = "f1lklm",
                            PhotoIdTypeId = 3
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryOfResidence")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryOfResidence = "Yemen"
                        },
                        new
                        {
                            Id = 2,
                            CountryOfResidence = "Mexico"
                        },
                        new
                        {
                            Id = 3,
                            CountryOfResidence = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 4,
                            CountryOfResidence = "Liechtenstein"
                        },
                        new
                        {
                            Id = 5,
                            CountryOfResidence = "Bahrain"
                        },
                        new
                        {
                            Id = 6,
                            CountryOfResidence = "Costa Rica"
                        },
                        new
                        {
                            Id = 7,
                            CountryOfResidence = "Norfolk Island"
                        },
                        new
                        {
                            Id = 8,
                            CountryOfResidence = "Monaco"
                        },
                        new
                        {
                            Id = 9,
                            CountryOfResidence = "Yemen"
                        },
                        new
                        {
                            Id = 10,
                            CountryOfResidence = "Ethiopia"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GenderType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenderType = 0
                        },
                        new
                        {
                            Id = 2,
                            GenderType = 1
                        },
                        new
                        {
                            Id = 3,
                            GenderType = 2
                        },
                        new
                        {
                            Id = 4,
                            GenderType = 3
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NativeLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NativeLanguage = "English"
                        },
                        new
                        {
                            Id = 2,
                            NativeLanguage = "Greek"
                        },
                        new
                        {
                            Id = 3,
                            NativeLanguage = "Russian"
                        },
                        new
                        {
                            Id = 4,
                            NativeLanguage = "Chinese"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.PhotoIdType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PhotoIdTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdType = 0
                        },
                        new
                        {
                            Id = 2,
                            IdType = 1
                        },
                        new
                        {
                            Id = 3,
                            IdType = 2
                        },
                        new
                        {
                            Id = 4,
                            IdType = 3
                        },
                        new
                        {
                            Id = 5,
                            IdType = 4
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxMark")
                        .HasColumnType("int");

                    b.Property<int?>("PassingMark")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            Category = "reinvent",
                            Description = "CSS Legacy AI Secured Guinea-Bissau SAS non-volatile Brunei Darussalam Rustic Berkshire",
                            PassingMark = 0,
                            Title = "mobile interfaces revolutionize"
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            Category = "asymmetric",
                            Description = "index Designer bypass JBOD world-class Landing invoice open-source Human invoice",
                            PassingMark = 0,
                            Title = "SAS conglomeration Incredible Plastic Tuna"
                        },
                        new
                        {
                            Id = 3,
                            Active = false,
                            Category = "Berkshire",
                            Description = "Small Cotton Keyboard bandwidth empower Handmade Steel Bike Wooden neural parse TCP Incredible open architecture",
                            PassingMark = 0,
                            Title = "Ranch Antigua and Barbuda Infrastructure"
                        },
                        new
                        {
                            Id = 4,
                            Active = false,
                            Category = "synthesizing",
                            Description = "Coves web-enabled ADP Mobility Metal Checking Account Security Personal Loan Account Cayman Islands Central",
                            PassingMark = 0,
                            Title = "Malaysia AGP Unbranded Cotton Keyboard"
                        },
                        new
                        {
                            Id = 5,
                            Active = false,
                            Category = "Paradigm",
                            Description = "Cambridgeshire orchestration Manager Latvian Lats Tasty Rubber Keyboard Drive Refined Concrete Cheese functionalities Assurance Lead",
                            PassingMark = 0,
                            Title = "withdrawal metrics copy"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            Category = "back up",
                            Description = "Points Forint methodologies Chief convergence Incredible Plastic Ball Route primary withdrawal copying",
                            PassingMark = 0,
                            Title = "extensible Investment Account Drives"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            Category = "hack",
                            Description = "Wyoming Liaison Guam Suriname haptic Infrastructure ivory payment Kids multi-byte",
                            PassingMark = 0,
                            Title = "synthesize frictionless AI"
                        },
                        new
                        {
                            Id = 8,
                            Active = false,
                            Category = "Barbados Dollar",
                            Description = "New Mexico California Money Market Account orchestrate Fantastic Plastic Bike JSON Forward Iowa Crescent deposit",
                            PassingMark = 0,
                            Title = "Fresh deposit withdrawal"
                        },
                        new
                        {
                            Id = 9,
                            Active = false,
                            Category = "bleeding-edge",
                            Description = "Drives Virgin Islands, U.S. clicks-and-mortar Wooden database CSS hybrid customized full-range B2B",
                            PassingMark = 0,
                            Title = "transmit deposit payment"
                        },
                        new
                        {
                            Id = 10,
                            Active = false,
                            Category = "Orchestrator",
                            Description = "Pitcairn Islands Fantastic Metal Pizza Fantastic Frozen Towels index Gorgeous Fresh Cheese Central Montana COM Progressive harness",
                            PassingMark = 0,
                            Title = "withdrawal Central Synchronised"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.DifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Difficulty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DifficultyLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = 0
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = 1
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = 2
                        },
                        new
                        {
                            Id = 4,
                            Difficulty = 3
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MaxMarks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxMarks = 26,
                            Name = "Sports & Music firewall input"
                        },
                        new
                        {
                            Id = 2,
                            MaxMarks = 25,
                            Name = "withdrawal synergize Movies & Clothing"
                        },
                        new
                        {
                            Id = 3,
                            MaxMarks = 29,
                            Name = "Human Philippine Peso Lead"
                        },
                        new
                        {
                            Id = 4,
                            MaxMarks = 37,
                            Name = "Lead back-end Agent"
                        },
                        new
                        {
                            Id = 5,
                            MaxMarks = 31,
                            Name = "capacity Parkways real-time"
                        },
                        new
                        {
                            Id = 6,
                            MaxMarks = 37,
                            Name = "Brunei Darussalam Associate Corporate"
                        },
                        new
                        {
                            Id = 7,
                            MaxMarks = 31,
                            Name = "Rupiah Island Small Cotton Car"
                        },
                        new
                        {
                            Id = 8,
                            MaxMarks = 39,
                            Name = "deploy bluetooth connecting"
                        },
                        new
                        {
                            Id = 9,
                            MaxMarks = 31,
                            Name = "Money Market Account connect Gorgeous"
                        },
                        new
                        {
                            Id = 10,
                            MaxMarks = 35,
                            Name = "transmit International scale"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssessmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CandidateScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxScore")
                        .HasColumnType("int");

                    b.Property<decimal?>("PercentScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Result")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ExamId");

                    b.ToTable("CandidateExams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            ExamDate = new DateTime(2021, 12, 17, 23, 9, 18, 640, DateTimeKind.Local).AddTicks(6534),
                            ExamId = 7,
                            ReportDate = new DateTime(2022, 9, 17, 16, 33, 0, 696, DateTimeKind.Unspecified).AddTicks(954)
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            ExamDate = new DateTime(2021, 12, 26, 8, 49, 20, 570, DateTimeKind.Local).AddTicks(7896),
                            ExamId = 4,
                            ReportDate = new DateTime(2022, 12, 25, 15, 40, 10, 944, DateTimeKind.Unspecified).AddTicks(8788)
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            ExamDate = new DateTime(2022, 6, 21, 23, 11, 57, 879, DateTimeKind.Local).AddTicks(3396),
                            ExamId = 6,
                            ReportDate = new DateTime(2022, 12, 1, 3, 40, 58, 559, DateTimeKind.Unspecified).AddTicks(1)
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            ExamDate = new DateTime(2021, 12, 10, 3, 57, 17, 926, DateTimeKind.Local).AddTicks(4261),
                            ExamId = 7,
                            ReportDate = new DateTime(2022, 11, 15, 14, 33, 49, 936, DateTimeKind.Unspecified).AddTicks(6907)
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            ExamDate = new DateTime(2021, 6, 21, 16, 28, 9, 867, DateTimeKind.Local).AddTicks(3195),
                            ExamId = 4,
                            ReportDate = new DateTime(2022, 10, 16, 22, 35, 32, 351, DateTimeKind.Unspecified).AddTicks(6467)
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            ExamDate = new DateTime(2021, 10, 6, 11, 9, 13, 574, DateTimeKind.Local).AddTicks(460),
                            ExamId = 3,
                            ReportDate = new DateTime(2022, 8, 14, 19, 43, 14, 499, DateTimeKind.Unspecified).AddTicks(2307)
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            ExamDate = new DateTime(2021, 12, 30, 7, 40, 10, 983, DateTimeKind.Local).AddTicks(6550),
                            ExamId = 3,
                            ReportDate = new DateTime(2022, 8, 22, 4, 26, 3, 7, DateTimeKind.Unspecified).AddTicks(7679)
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            ExamDate = new DateTime(2021, 4, 16, 1, 0, 59, 844, DateTimeKind.Local).AddTicks(4371),
                            ExamId = 3,
                            ReportDate = new DateTime(2022, 10, 8, 23, 8, 6, 721, DateTimeKind.Unspecified).AddTicks(2164)
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            ExamDate = new DateTime(2021, 5, 3, 13, 5, 51, 920, DateTimeKind.Local).AddTicks(4048),
                            ExamId = 2,
                            ReportDate = new DateTime(2022, 7, 24, 17, 55, 45, 687, DateTimeKind.Unspecified).AddTicks(6041)
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            ExamDate = new DateTime(2022, 9, 13, 1, 23, 49, 976, DateTimeKind.Local).AddTicks(163),
                            ExamId = 7,
                            ReportDate = new DateTime(2022, 11, 3, 17, 15, 51, 106, DateTimeKind.Unspecified).AddTicks(3468)
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExamAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CandidateExamId")
                        .HasColumnType("int");

                    b.Property<string>("ChosenOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CandidateExamId");

                    b.ToTable("CandidateExamAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateExamId = 9,
                            ChosenOption = "<h2>this is an option</h2>",
                            CorrectOption = "<h1>this is an option</h1>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 2,
                            CandidateExamId = 1,
                            ChosenOption = "<h3>this is an option</h3>",
                            CorrectOption = "<h2>this is an option</h2>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 3,
                            CandidateExamId = 3,
                            ChosenOption = "<h1>this is an option</h1>",
                            CorrectOption = "<h3>this is an option</h3>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 4,
                            CandidateExamId = 8,
                            ChosenOption = "<h1>this is an option</h1>",
                            CorrectOption = "<h1>this is an option</h1>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 5,
                            CandidateExamId = 3,
                            ChosenOption = "<h2>this is an option</h2>",
                            CorrectOption = "<h1>this is an option</h1>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 6,
                            CandidateExamId = 8,
                            ChosenOption = "<h2>this is an option</h2>",
                            CorrectOption = "<h3>this is an option</h3>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 7,
                            CandidateExamId = 9,
                            ChosenOption = "<h3>this is an option</h3>",
                            CorrectOption = "<h3>this is an option</h3>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 8,
                            CandidateExamId = 1,
                            ChosenOption = "<h2>this is an option</h2>",
                            CorrectOption = "<h3>this is an option</h3>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 9,
                            CandidateExamId = 10,
                            ChosenOption = "<h2>this is an option</h2>",
                            CorrectOption = "<h2>this is an option</h2>",
                            IsCorrect = false
                        },
                        new
                        {
                            Id = 10,
                            CandidateExamId = 8,
                            ChosenOption = "<h1>this is an option</h1>",
                            CorrectOption = "<h2>this is an option</h2>",
                            IsCorrect = false
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateId = 1
                        },
                        new
                        {
                            Id = 2,
                            CertificateId = 1
                        },
                        new
                        {
                            Id = 3,
                            CertificateId = 2
                        },
                        new
                        {
                            Id = 4,
                            CertificateId = 3
                        },
                        new
                        {
                            Id = 5,
                            CertificateId = 3
                        },
                        new
                        {
                            Id = 6,
                            CertificateId = 3
                        },
                        new
                        {
                            Id = 7,
                            CertificateId = 4
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Correct")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Correct = false,
                            QuestionId = 1,
                            Text = "<h2>this is an option</h2>"
                        },
                        new
                        {
                            Id = 2,
                            Correct = false,
                            QuestionId = 9,
                            Text = "<h2>this is an option</h2>"
                        },
                        new
                        {
                            Id = 3,
                            Correct = false,
                            QuestionId = 5,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 4,
                            Correct = false,
                            QuestionId = 1,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 5,
                            Correct = false,
                            QuestionId = 9,
                            Text = "<h3>this is an option</h3>"
                        },
                        new
                        {
                            Id = 6,
                            Correct = false,
                            QuestionId = 9,
                            Text = "<h3>this is an option</h3>"
                        },
                        new
                        {
                            Id = 7,
                            Correct = false,
                            QuestionId = 10,
                            Text = "<h2>this is an option</h2>"
                        },
                        new
                        {
                            Id = 8,
                            Correct = false,
                            QuestionId = 9,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 9,
                            Correct = false,
                            QuestionId = 5,
                            Text = "<h3>this is an option</h3>"
                        },
                        new
                        {
                            Id = 10,
                            Correct = false,
                            QuestionId = 4,
                            Text = "<h3>this is an option</h3>"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DifficultyLevelId = 3,
                            Text = "<h1>this is question</h1>",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            DifficultyLevelId = 3,
                            Text = "<h3>this is question</h3>",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 3,
                            DifficultyLevelId = 1,
                            Text = "<h1>this is question</h1>",
                            TopicId = 8
                        },
                        new
                        {
                            Id = 4,
                            DifficultyLevelId = 4,
                            Text = "<h1>this is question</h1>",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 5,
                            DifficultyLevelId = 3,
                            Text = "<h1>this is question</h1>",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 6,
                            DifficultyLevelId = 2,
                            Text = "<h3>this is question</h3>",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 7,
                            DifficultyLevelId = 4,
                            Text = "<h2>this is question</h2>",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 8,
                            DifficultyLevelId = 4,
                            Text = "<h3>this is question</h3>",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 9,
                            DifficultyLevelId = 3,
                            Text = "<h1>this is question</h1>",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 10,
                            DifficultyLevelId = 4,
                            Text = "<h1>this is question</h1>",
                            TopicId = 6
                        });
                });

            modelBuilder.Entity("CertificateTopic", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.Certificate", null)
                        .WithMany()
                        .HasForeignKey("CertificatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Certificates.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.HasOne("ModelLibrary.Models.Exams.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Questions.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Address", b =>
                {
                    b.HasOne("ModelLibrary.Models.Candidates.Candidate", "Candidate")
                        .WithMany("Address")
                        .HasForeignKey("CandidateId");

                    b.HasOne("ModelLibrary.Models.Candidates.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", "AppUser")
                        .WithOne("Candidate")
                        .HasForeignKey("ModelLibrary.Models.Candidates.Candidate", "AppUserId");

                    b.HasOne("ModelLibrary.Models.Candidates.Gender", "Gender")
                        .WithMany("Candidates")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Candidates.Language", "Language")
                        .WithMany("Candidates")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Candidates.PhotoIdType", "PhotoIdType")
                        .WithMany("Candidates")
                        .HasForeignKey("PhotoIdTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Gender");

                    b.Navigation("Language");

                    b.Navigation("PhotoIdType");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.HasOne("ModelLibrary.Models.Candidates.Candidate", "Candidate")
                        .WithMany("CandidateExams")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Exams.Exam", "Exam")
                        .WithMany("CandidateExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExamAnswers", b =>
                {
                    b.HasOne("ModelLibrary.Models.Exams.CandidateExam", "CandidateExam")
                        .WithMany("CandidateExamAnswers")
                        .HasForeignKey("CandidateExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateExam");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.Certificate", "Certificate")
                        .WithMany("Exams")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Option", b =>
                {
                    b.HasOne("ModelLibrary.Models.Questions.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.DifficultyLevel", "DifficultyLevel")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Certificates.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ModelLibrary.Models.AppUser", b =>
                {
                    b.Navigation("Candidate")
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Gender", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Language", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.PhotoIdType", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Certificate", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.DifficultyLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.Navigation("CandidateExamAnswers");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.Navigation("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
