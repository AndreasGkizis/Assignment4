// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp4a.Data;

#nullable disable

namespace WebApp4a.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230114225420_SeedingHalf")]
    partial class SeedingHalf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CertificateTopic", b =>
                {
                    b.Property<int>("CertificatesId")
                        .HasColumnType("int");

                    b.Property<int>("TopicsId")
                        .HasColumnType("int");

                    b.HasKey("CertificatesId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("CertificateTopic");
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.Property<int>("ExamsId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.HasKey("ExamsId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModelLibrary.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a266ef0-f116-49b7-95ee-ac2de2fdbd00",
                            Email = "admin0@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be1ace94-f799-44fd-b946-014d6fdf71a1",
                            TwoFactorEnabled = false,
                            UserName = "Admin0"
                        },
                        new
                        {
                            Id = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4eeb9621-c141-4da1-99d8-9e6dbd8a57ba",
                            Email = "admin1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8249df9a-76ff-4f45-97c8-f08bee44e264",
                            TwoFactorEnabled = false,
                            UserName = "Admin1"
                        },
                        new
                        {
                            Id = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99094eb9-712d-44d3-a46a-3f63b539bbc2",
                            Email = "admin2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b36f9ea6-2448-446e-a09b-37ac1a263472",
                            TwoFactorEnabled = false,
                            UserName = "Admin2"
                        },
                        new
                        {
                            Id = "f60a904a-aba6-4635-892d-f38919b09896",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afea8d14-c41b-4160-b6b8-b7be04950d29",
                            Email = "admin3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ccb4740-df0d-4a94-8f31-33b82265cad3",
                            TwoFactorEnabled = false,
                            UserName = "Admin3"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateAppUserId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address1 = "66095 Lynch Pine",
                            Address2 = "68310 Schneider Inlet",
                            City = "Port Rowena",
                            CountryId = 1,
                            PostalCode = "68826-2859",
                            State = "New Mexico"
                        },
                        new
                        {
                            Id = 2,
                            Address1 = "0572 Annabelle Stream",
                            Address2 = "0751 Cormier Pass",
                            City = "South Madgeport",
                            CountryId = 2,
                            PostalCode = "59877-3334",
                            State = "Georgia"
                        },
                        new
                        {
                            Id = 3,
                            Address1 = "51466 Klein Station",
                            Address2 = "85018 Jordi Flats",
                            City = "East Angelborough",
                            CountryId = 3,
                            PostalCode = "82709",
                            State = "Florida"
                        },
                        new
                        {
                            Id = 4,
                            Address1 = "23758 Estella Inlet",
                            Address2 = "14592 Stehr Street",
                            City = "East Janiceborough",
                            CountryId = 4,
                            PostalCode = "42369",
                            State = "New Hampshire"
                        },
                        new
                        {
                            Id = 5,
                            Address1 = "3185 Daugherty Avenue",
                            Address2 = "2243 White Drive",
                            City = "South Lonnie",
                            CountryId = 5,
                            PostalCode = "69677-1704",
                            State = "South Carolina"
                        },
                        new
                        {
                            Id = 6,
                            Address1 = "687 Jada Crest",
                            Address2 = "651 Albina Tunnel",
                            City = "Port Velva",
                            CountryId = 6,
                            PostalCode = "13970-2364",
                            State = "West Virginia"
                        },
                        new
                        {
                            Id = 7,
                            Address1 = "997 Tiana Pike",
                            Address2 = "948 MacGyver Fords",
                            City = "Goyetteland",
                            CountryId = 7,
                            PostalCode = "28047",
                            State = "Nevada"
                        },
                        new
                        {
                            Id = 8,
                            Address1 = "41895 Carroll Lock",
                            Address2 = "591 Julia Flat",
                            City = "West Thea",
                            CountryId = 8,
                            PostalCode = "92910-9490",
                            State = "Maine"
                        },
                        new
                        {
                            Id = 9,
                            Address1 = "930 Madalyn Cape",
                            Address2 = "8263 Spencer Via",
                            City = "Gutkowskichester",
                            CountryId = 9,
                            PostalCode = "82779",
                            State = "North Carolina"
                        },
                        new
                        {
                            Id = 10,
                            Address1 = "68421 Rico Mews",
                            Address2 = "9546 Romaguera Lakes",
                            City = "West Nathanielmouth",
                            CountryId = 10,
                            PostalCode = "12449",
                            State = "Pennsylvania"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CandidateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PhotoIdIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoIdTypeId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PhotoIdTypeId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            AppUserId = "9407b6e2-f46e-4a79-a725-dfb1e15e2915",
                            CandidateNumber = "419272734",
                            DateOfBirth = new DateTime(1996, 11, 9, 12, 42, 52, 985, DateTimeKind.Local).AddTicks(2253),
                            Email = "Cordie_Sawayn64@hotmail.com",
                            FirstName = "Donna",
                            GenderId = 2,
                            Landline = "1-864-658-6163",
                            LanguageId = 3,
                            LastName = "Zboncak",
                            MiddleName = "Josianne",
                            Mobile = "230.942.2510",
                            PhotoIdIssueDate = new DateTime(2019, 6, 26, 4, 32, 47, 546, DateTimeKind.Local).AddTicks(4790),
                            PhotoIdNumber = "藞專誢",
                            PhotoIdTypeId = 3
                        },
                        new
                        {
                            AppUserId = "be69a4bd-fb90-41dd-b65b-4ff8b619b767",
                            CandidateNumber = "353153592",
                            DateOfBirth = new DateTime(2009, 5, 16, 8, 34, 53, 479, DateTimeKind.Local).AddTicks(9739),
                            Email = "Ashtyn.Howe@gmail.com",
                            FirstName = "Gregory",
                            GenderId = 4,
                            Landline = "282-355-5754",
                            LanguageId = 3,
                            LastName = "Friesen",
                            MiddleName = "Gladyce",
                            Mobile = "649.475.1379",
                            PhotoIdIssueDate = new DateTime(2021, 9, 18, 21, 49, 0, 678, DateTimeKind.Local).AddTicks(6484),
                            PhotoIdNumber = "቉뼫䞅辢j�",
                            PhotoIdTypeId = 5
                        },
                        new
                        {
                            AppUserId = "8ca319b2-762d-45e3-8b26-edd6b1f4ba75",
                            CandidateNumber = "193265026",
                            DateOfBirth = new DateTime(1979, 9, 20, 19, 23, 31, 404, DateTimeKind.Local).AddTicks(3920),
                            Email = "Marlen.Schmitt50@gmail.com",
                            FirstName = "Alize",
                            GenderId = 1,
                            Landline = "821.492.5512 x6071",
                            LanguageId = 1,
                            LastName = "Hansen",
                            MiddleName = "Esther",
                            Mobile = "(957) 964-6282",
                            PhotoIdIssueDate = new DateTime(2018, 3, 3, 15, 57, 45, 814, DateTimeKind.Local).AddTicks(2999),
                            PhotoIdNumber = "ꡰ騹�持昚憮",
                            PhotoIdTypeId = 3
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryOfResidence")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryOfResidence = "Saint Lucia"
                        },
                        new
                        {
                            Id = 2,
                            CountryOfResidence = "Yemen"
                        },
                        new
                        {
                            Id = 3,
                            CountryOfResidence = "Mexico"
                        },
                        new
                        {
                            Id = 4,
                            CountryOfResidence = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 5,
                            CountryOfResidence = "Liechtenstein"
                        },
                        new
                        {
                            Id = 6,
                            CountryOfResidence = "Bahrain"
                        },
                        new
                        {
                            Id = 7,
                            CountryOfResidence = "Costa Rica"
                        },
                        new
                        {
                            Id = 8,
                            CountryOfResidence = "Norfolk Island"
                        },
                        new
                        {
                            Id = 9,
                            CountryOfResidence = "Monaco"
                        },
                        new
                        {
                            Id = 10,
                            CountryOfResidence = "Yemen"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GenderType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenderType = 0
                        },
                        new
                        {
                            Id = 2,
                            GenderType = 1
                        },
                        new
                        {
                            Id = 3,
                            GenderType = 2
                        },
                        new
                        {
                            Id = 4,
                            GenderType = 3
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NativeLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NativeLanguage = "English"
                        },
                        new
                        {
                            Id = 2,
                            NativeLanguage = "Greek"
                        },
                        new
                        {
                            Id = 3,
                            NativeLanguage = "Russian"
                        },
                        new
                        {
                            Id = 4,
                            NativeLanguage = "Chinese"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.PhotoIdType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PhotoIdTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdType = 0
                        },
                        new
                        {
                            Id = 2,
                            IdType = 1
                        },
                        new
                        {
                            Id = 3,
                            IdType = 2
                        },
                        new
                        {
                            Id = 4,
                            IdType = 3
                        },
                        new
                        {
                            Id = 5,
                            IdType = 4
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PassingMark")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.DifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Difficulty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DifficultyLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = 0
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = 1
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = 2
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MaxMarks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxMarks = 26,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 2,
                            MaxMarks = 35,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 3,
                            MaxMarks = 29,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 4,
                            MaxMarks = 27,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 5,
                            MaxMarks = 35,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 6,
                            MaxMarks = 40,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 7,
                            MaxMarks = 27,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 8,
                            MaxMarks = 35,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 9,
                            MaxMarks = 35,
                            Name = "System.String[]"
                        },
                        new
                        {
                            Id = 10,
                            MaxMarks = 26,
                            Name = "System.String[]"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssessmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CandidateScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxScore")
                        .HasColumnType("int");

                    b.Property<decimal?>("PercentScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Result")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CandidateAppUserId");

                    b.HasIndex("ExamId");

                    b.ToTable("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExamAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CandidateExamId")
                        .HasColumnType("int");

                    b.Property<string>("ChosenOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CandidateExamId");

                    b.ToTable("CandidateExamAnswers");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CertificateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Correct")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Correct = false,
                            QuestionId = 1,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 2,
                            Correct = false,
                            QuestionId = 2,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 3,
                            Correct = false,
                            QuestionId = 8,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 4,
                            Correct = false,
                            QuestionId = 6,
                            Text = "<h2>this is an option</h2>"
                        },
                        new
                        {
                            Id = 5,
                            Correct = false,
                            QuestionId = 1,
                            Text = "<h2>this is an option</h2>"
                        },
                        new
                        {
                            Id = 6,
                            Correct = false,
                            QuestionId = 5,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 7,
                            Correct = false,
                            QuestionId = 6,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 8,
                            Correct = false,
                            QuestionId = 5,
                            Text = "<h2>this is an option</h2>"
                        },
                        new
                        {
                            Id = 9,
                            Correct = false,
                            QuestionId = 7,
                            Text = "<h1>this is an option</h1>"
                        },
                        new
                        {
                            Id = 10,
                            Correct = false,
                            QuestionId = 6,
                            Text = "<h1>this is an option</h1>"
                        });
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("TopicId");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DifficultyLevelId = 2,
                            Text = "<h1>this is question</h1>",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 2,
                            DifficultyLevelId = 2,
                            Text = "<h3>this is question</h3>",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            DifficultyLevelId = 1,
                            Text = "<h1>this is question</h1>",
                            TopicId = 10
                        },
                        new
                        {
                            Id = 4,
                            DifficultyLevelId = 3,
                            Text = "<h1>this is question</h1>",
                            TopicId = 7
                        },
                        new
                        {
                            Id = 5,
                            DifficultyLevelId = 1,
                            Text = "<h1>this is question</h1>",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 6,
                            DifficultyLevelId = 1,
                            Text = "<h1>this is question</h1>",
                            TopicId = 9
                        },
                        new
                        {
                            Id = 7,
                            DifficultyLevelId = 3,
                            Text = "<h1>this is question</h1>",
                            TopicId = 9
                        },
                        new
                        {
                            Id = 8,
                            DifficultyLevelId = 1,
                            Text = "<h2>this is question</h2>",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 9,
                            DifficultyLevelId = 2,
                            Text = "<h1>this is question</h1>",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 10,
                            DifficultyLevelId = 2,
                            Text = "<h1>this is question</h1>",
                            TopicId = 6
                        });
                });

            modelBuilder.Entity("CertificateTopic", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.Certificate", null)
                        .WithMany()
                        .HasForeignKey("CertificatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Certificates.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.HasOne("ModelLibrary.Models.Exams.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Questions.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Address", b =>
                {
                    b.HasOne("ModelLibrary.Models.Candidates.Candidate", "Candidate")
                        .WithMany("Address")
                        .HasForeignKey("CandidateAppUserId");

                    b.HasOne("ModelLibrary.Models.Candidates.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.HasOne("ModelLibrary.Models.AppUser", "AppUser")
                        .WithOne("Candidate")
                        .HasForeignKey("ModelLibrary.Models.Candidates.Candidate", "AppUserId");

                    b.HasOne("ModelLibrary.Models.Candidates.Gender", "Gender")
                        .WithMany("Candidates")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Candidates.Language", "Language")
                        .WithMany("Candidates")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Candidates.PhotoIdType", "PhotoIdType")
                        .WithMany("Candidates")
                        .HasForeignKey("PhotoIdTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Gender");

                    b.Navigation("Language");

                    b.Navigation("PhotoIdType");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.HasOne("ModelLibrary.Models.Candidates.Candidate", "Candidate")
                        .WithMany("CandidateExams")
                        .HasForeignKey("CandidateAppUserId");

                    b.HasOne("ModelLibrary.Models.Exams.Exam", "Exam")
                        .WithMany("CandidateExams")
                        .HasForeignKey("ExamId");

                    b.Navigation("Candidate");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExamAnswers", b =>
                {
                    b.HasOne("ModelLibrary.Models.Exams.CandidateExam", "CandidateExam")
                        .WithMany("CandidateExamAnswers")
                        .HasForeignKey("CandidateExamId");

                    b.Navigation("CandidateExam");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.Certificate", "Certificate")
                        .WithMany("Exams")
                        .HasForeignKey("CertificateId");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Option", b =>
                {
                    b.HasOne("ModelLibrary.Models.Questions.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.HasOne("ModelLibrary.Models.Certificates.DifficultyLevel", "DifficultyLevel")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.Models.Certificates.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ModelLibrary.Models.AppUser", b =>
                {
                    b.Navigation("Candidate")
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Candidate", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Gender", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.Language", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Candidates.PhotoIdType", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Certificate", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.DifficultyLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ModelLibrary.Models.Certificates.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.CandidateExam", b =>
                {
                    b.Navigation("CandidateExamAnswers");
                });

            modelBuilder.Entity("ModelLibrary.Models.Exams.Exam", b =>
                {
                    b.Navigation("CandidateExams");
                });

            modelBuilder.Entity("ModelLibrary.Models.Questions.Question", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
